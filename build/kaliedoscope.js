// Generated by CoffeeScript 1.6.3
/*
Kaliedoscope Test

http://stackoverflow.com/questions/13739901/vertex-kaleidoscope-shader
*/


(function() {
  var Kaliedoscope, canvas, cgl, kk,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Kaliedoscope = (function() {
    function Kaliedoscope() {
      this.resize = __bind(this.resize, this);
    }

    Kaliedoscope.prototype.loadAssets = function() {
      var a, b, i, self, _genLoadAudio, _i, _loadVideo;
      a = function() {
        return console.log("Loaded: " + this.completed_items.length / this.items.length);
      };
      b = function() {
        return console.log("Loaded All");
      };
      this.lq = new CoffeeGL.Loader.LoadQueue(this, a, b);
      self = this;
      _loadVideo = new CoffeeGL.Loader.LoadItem(function() {
        var _this = this;
        self.video_element = document.getElementById("video");
        self.video_element.preload = "auto";
        self.video_element.src = "/background.mp4";
        self.video_element.addEventListener("ended", function() {
          self.video_element.currentTime = 0;
          return self.video_element.play();
        }, false);
        self.video_element.addEventListener("timeupdate", function() {
          if (self.video_element.currentTime > 53) {
            self.video_element.pause();
            self.video_element.currentTime = 0;
            self.video_element.play();
          }
        }, false);
        return self.video_element.oncanplay = function(event) {
          self.video_element.play();
          self.video_element.pause();
          self.video_element.currentTime = 0;
          self.video_element.play();
          self.t.update(self.video_element);
          self.video_node.add(self.t);
          self.video_ready = true;
          _this.loaded();
          return console.log("Video Loaded");
        };
      });
      _genLoadAudio = function(audio_url) {
        var _loadAudioSample;
        return _loadAudioSample = new CoffeeGL.Loader.LoadItem(function() {
          var sound,
            _this = this;
          sound = new Howl({
            urls: [audio_url],
            onload: function() {
              self.sounds.push(sound);
              sound.playing = false;
              return _this.loaded();
            },
            onplay: function() {
              return this.playing = true;
            },
            onend: function() {
              return this.playing = false;
            }
          });
          return _loadAudioSample;
        });
      };
      this.lq.add(_loadVideo);
      for (i = _i = 0; _i <= 30; i = ++_i) {
        if (i > 9) {
          this.lq.add(_genLoadAudio('/sound/sound0' + i + '.mp3'));
        } else {
          this.lq.add(_genLoadAudio('/sound/sound00' + i + '.mp3'));
        }
      }
      return this.lq.start();
    };

    Kaliedoscope;

    Kaliedoscope.prototype.playSound = function() {
      var choice, sound, x, y, _i, _len, _ref;
      if (!this.mouse_over) {
        return;
      }
      _ref = this.sounds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sound = _ref[_i];
        if (sound.playing) {
          sound.fadeOut();
        }
      }
      x = Math.floor(((this.ray.x + 3.0) / 6.0) * 10);
      y = Math.floor(((this.ray.y + 3.0) / 6.0) * 3);
      choice = x + y;
      if (choice >= 0 && choice < this.sounds.length) {
        if (this.sound_current !== choice) {
          this.sounds[choice].play();
          return this.sound_current = choice;
        }
      }
    };

    Kaliedoscope.prototype.setupPlane = function() {
      var i, ids, idt, j, sstep, tcs, _i, _j, _ref, _ref1;
      this.plane = new CoffeeGL.PlaneHexagonFlat(this.plane_xres, this.plane_yres);
      idt = 0;
      tcs = [
        {
          u: 0.0,
          v: 0.0
        }, {
          u: 0.5,
          v: 1.0
        }, {
          u: 1.0,
          v: 0.0
        }
      ];
      sstep = [0, 1, 2];
      ids = 0;
      for (i = _i = 0, _ref = this.plane_yres - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        ids = 0;
        for (j = _j = 0, _ref1 = this.plane_xres - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          this.plane.t[idt++] = tcs[ids].u;
          this.plane.t[idt++] = tcs[ids].v;
          ids++;
          if (ids > 2) {
            ids = 0;
          }
        }
      }
      return this.plane_base = CoffeeGL.clone(this.plane);
    };

    Kaliedoscope.prototype.rotateTexCoords = function(dt) {
      var i, idt, j, np, rotm, _i, _ref, _results;
      if (!this.mouse_over) {
        return;
      }
      np = new CoffeeGL.Vec3(0, 0, 0);
      idt = 0;
      rotm = new CoffeeGL.Matrix4();
      rotm.rotate(new CoffeeGL.Vec3(0, 0, 1), dt * 0.001 * this.warp.rot_speed);
      _results = [];
      for (i = _i = 0, _ref = this.plane_yres - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.plane_xres - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            np.x = (this.plane.t[idt] * 2.0) - 1;
            np.y = (this.plane.t[idt + 1] * 2.0) - 1;
            rotm.multVec(np);
            this.plane.t[idt++] = (np.x + 1) / 2;
            _results1.push(this.plane.t[idt++] = (np.y + 1) / 2);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Kaliedoscope.prototype.morphPlane = function() {
      var dd, dir, dir_dist, falloff, i, idt, inv, j, np, ray2, ray2_prev, tp, _i, _ref, _results;
      if (!(this.mouse_over && this.mouse_pressed)) {
        return;
      }
      idt = 0;
      np = new CoffeeGL.Vec3(0, 0, 0);
      tp = new CoffeeGL.Vec2(0, 0);
      ray2 = new CoffeeGL.Vec2(this.ray.x, this.ray.y);
      ray2_prev = new CoffeeGL.Vec2(this.ray_prev.x, this.ray_prev.y);
      inv = CoffeeGL.Matrix4.invert(this.video_node.matrix);
      _results = [];
      for (i = _i = 0, _ref = this.plane_yres - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.plane_xres - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            np.x = this.plane.p[idt];
            np.y = this.plane.p[idt + 1];
            np.z = this.plane.p[idt + 2];
            this.video_node.matrix.multVec(np);
            tp.x = np.x;
            tp.y = np.y;
            dir = CoffeeGL.Vec2.sub(ray2, ray2_prev);
            dir_dist = ray2.dist(ray2_prev);
            dd = tp.dist(ray2);
            dir.normalize();
            if (dd < this.warp.range) {
              falloff = dd / this.warp.range * this.warp.falloff_factor;
              tp.add(dir.multScalar(Math.pow(dir_dist, this.warp.exponent) * this.warp.factor * falloff));
            }
            np.x = tp.x;
            np.y = tp.y;
            inv.multVec(np);
            this.plane.p[idt++] = np.x;
            this.plane.p[idt++] = np.y;
            _results1.push(this.plane.p[idt++] = np.z);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Kaliedoscope.prototype.springBack = function() {
      var bp, dir, dir_dist, i, idt, j, np, _i, _ref, _results;
      idt = 0;
      np = new CoffeeGL.Vec3(0, 0, 0);
      bp = new CoffeeGL.Vec3(0, 0, 0);
      _results = [];
      for (i = _i = 0, _ref = this.plane_yres - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.plane_xres - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            np.x = this.plane.p[idt];
            np.y = this.plane.p[idt + 1];
            np.z = this.plane.p[idt + 2];
            bp.x = this.plane_base.p[idt];
            bp.y = this.plane_base.p[idt + 1];
            bp.z = this.plane_base.p[idt + 2];
            dir = CoffeeGL.Vec3.sub(bp, np);
            dir_dist = bp.dist(np);
            dir.normalize();
            dir.multScalar(this.warp.springiness);
            if (dir_dist > 0.01) {
              this.plane.p[idt] = np.x + dir.x;
              this.plane.p[idt + 1] = np.y + dir.y;
              this.plane.p[idt + 2] = np.z + dir.z;
            }
            _results1.push(idt += 3);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Kaliedoscope.prototype.videoNodeTrans = function(w, h) {
      var xfactor, yfactor;
      if (w == null) {
        w = 1;
      }
      if (h == null) {
        h = 1;
      }
      this.video_node.matrix.identity();
      this.video_node.matrix.rotate(new CoffeeGL.Vec3(1, 0, 0), CoffeeGL.PI / 2);
      xfactor = 2.0 * w / h;
      yfactor = 2.0;
      return this.video_node.matrix.scale(new CoffeeGL.Vec3(xfactor, 1, yfactor));
    };

    Kaliedoscope.prototype.init = function() {
      var datg, r0,
        _this = this;
      this.plane_yres = 9;
      this.plane_xres = 21;
      this.ray = new CoffeeGL.Vec3(0, 0, 0);
      this.ray_prev = new CoffeeGL.Vec3(0, 0, 0);
      this.setupPlane();
      this.video_node = new CoffeeGL.Node(this.plane);
      this.warp = {
        exponent: 2,
        factor: 0.6,
        range: 0.4,
        falloff_factor: 1.0,
        springiness: 0.0001,
        rot_speed: 1.0
      };
      this.sound_current = -1;
      this.sound_on = false;
      this.video_node.brew({
        position_buffer_access: GL.DYNAMIC_DRAW,
        texcoord_buffer_access: GL.DYNAMIC_DRAW
      });
      this.videoNodeTrans(CoffeeGL.Context.width, CoffeeGL.Context.height);
      r0 = new CoffeeGL.Request('/basic_texture.glsl');
      r0.get(function(data) {
        _this.shader = new CoffeeGL.Shader(data);
        _this.shader.bind();
        return _this.shader.setUniform3v("uMouseRay", new CoffeeGL.Vec3(0, 0, 0));
      });
      this.camera = new CoffeeGL.Camera.PerspCamera();
      this.camera.pos.z = 3.8;
      this.camera.setViewport(CoffeeGL.Context.width, CoffeeGL.Context.height);
      this.video_node.add(this.camera);
      this.t = new CoffeeGL.TextureBase({
        width: 240,
        height: 134
      });
      GL.enable(GL.CULL_FACE);
      GL.cullFace(GL.BACK);
      GL.enable(GL.DEPTH_TEST);
      this.video_ready = false;
      this.sounds = [];
      this.loadAssets();
      datg = new dat.GUI();
      datg.remember(this);
      datg.add(this.warp, 'exponent', 1.0, 5.0);
      datg.add(this.warp, 'factor', 0.001, 10.0);
      datg.add(this.warp, 'range', 0.01, 1.0);
      datg.add(this.warp, 'falloff_factor', 0.01, 10.0);
      datg.add(this.warp, 'springiness', 0.00001, 0.01);
      datg.add(this.warp, 'rot_speed', 0.01, 10.0);
      datg.add(this, 'sound_on');
      CoffeeGL.Context.mouseMove.add(this.mouseMoved, this);
      CoffeeGL.Context.mouseOut.add(this.mouseOut, this);
      CoffeeGL.Context.mouseOver.add(this.mouseOver, this);
      CoffeeGL.Context.mouseDown.add(this.mouseDown, this);
      CoffeeGL.Context.mouseUp.add(this.mouseUp, this);
      this.mouse_over = false;
      return this.mouse_pressed = false;
    };

    Kaliedoscope.prototype.update = function(dt) {
      if (this.video_ready) {
        this.t.update(this.video_element);
      }
      if (this.shader != null) {
        this.shader.setUniform3v("uMouseRay", this.ray);
      }
      this.morphPlane();
      this.rotateTexCoords(dt);
      this.video_node.rebrew({
        position_buffer: 0,
        texcoord_buffer: 0
      });
      this.springBack();
      if (this.sound_on) {
        return this.playSound();
      }
    };

    Kaliedoscope.prototype.draw = function() {
      GL.clearColor(0.15, 0.15, 0.15, 1.0);
      GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
      return this.video_node.draw();
    };

    Kaliedoscope.prototype.resize = function() {
      CoffeeGL.Context.resizeCanvas(window.innerWidth, window.innerHeight);
      this.camera.setViewport(CoffeeGL.Context.width, CoffeeGL.Context.height);
      return this.videoNodeTrans(CoffeeGL.Context.width, CoffeeGL.Context.height);
    };

    Kaliedoscope.prototype.mouseMoved = function(event) {
      var x, y;
      x = event.mouseX;
      y = event.mouseY;
      this.ray_prev.copyFrom(this.ray);
      this.ray = this.camera.castRay(x, y);
      this.ray.multScalar(this.camera.pos.z);
      return console.log(this.ray);
    };

    Kaliedoscope.prototype.mouseOver = function(event) {
      return this.mouse_over = true;
    };

    Kaliedoscope.prototype.mouseOut = function(event) {
      return this.mouse_over = false;
    };

    Kaliedoscope.prototype.mouseDown = function(event) {
      return this.mouse_pressed = true;
    };

    Kaliedoscope.prototype.mouseUp = function(event) {
      return this.mouse_pressed = false;
    };

    return Kaliedoscope;

  })();

  canvas = document.getElementById('webgl-canvas');

  canvas.width = window.innerWidth;

  canvas.height = window.innerHeight;

  kk = new Kaliedoscope();

  cgl = new CoffeeGL.App('webgl-canvas', kk, kk.init, kk.draw, kk.update);

  if (typeof window !== "undefined" && window !== null) {
    window.addEventListener('resize', kk.resize, false);
  }

}).call(this);
