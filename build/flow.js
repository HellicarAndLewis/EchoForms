// Generated by CoffeeScript 1.6.3
/*
Echo Forms - Hellicar & Lewis
Coding - Benjamin Blundell @ section9.co.uk
*/


(function() {
  var OpticalFlow;

  OpticalFlow = (function() {
    function OpticalFlow(dom_webcam, dom_canvas) {
      this.dom_webcam = dom_webcam;
      this.dom_canvas = dom_canvas;
      this.curr_img_pyr = new jsfeat.pyramid_t(3);
      this.prev_img_pyr = new jsfeat.pyramid_t(3);
      this.curr_img_pyr.allocate(this.dom_webcam.videoWidth, this.dom_webcam.videoHeight, jsfeat.U8_t | jsfeat.C1_t);
      this.prev_img_pyr.allocate(this.dom_webcam.videoWidth, this.dom_webcam.videoHeight, jsfeat.U8_t | jsfeat.C1_t);
      this.point_count = 0;
      this.point_status = new Uint8Array(100);
      this.prev_xy = new Float32Array(100 * 2);
      this.curr_xy = new Float32Array(100 * 2);
      this.options = {};
      this.options['win_size'] = 7;
      this.options['max_iterations'] = 4;
      this.options['epsilon'] = 0.01;
      this.options['min_eigen'] = 0.01;
      this.dom_canvas.width = this.dom_webcam.videoWidth;
      this.dom_canvas.height = this.dom_webcam.videoHeight;
      this.ctx = this.dom_canvas.getContext('2d');
      this.ctx.fillStyle = "rgb(0,255,0)";
      this.ctx.strokeStyle = "rgb(0,255,0)";
      this;
    }

    OpticalFlow.prototype.update = function(dt) {
      var _pt_xy, _pyr;
      this.ctx.drawImage(this.dom_webcam, 0, 0, this.dom_webcam.videoWidth, this.dom_webcam.videoHeight);
      _pt_xy = this.prev_xy;
      this.prev_xy = this.curr_xy;
      this.curr_xy = _pt_xy;
      _pyr = this.prev_img_pyr;
      this.prev_img_pyr = this.curr_img_pyr;
      this.curr_img_pyr = _pyr;
      jsfeat.imgproc.grayscale(this.dom_webcam, this.dom_webcam.videoWidth, this.dom_webcam.videoHeight, this.curr_img_pyr.data[0]);
      this.curr_img_pyr.build(this.curr_img_pyr.data[0], true);
      return jsfeat.optical_flow_lk.track(this.prev_img_pyr, this.curr_img_pyr, this.prev_xy, this.curr_xy, this.point_count, this.options.win_size | 0, this.options.max_iterations | 0, this.point_status, this.options.epsilon, this.options.min_eigen);
    };

    return OpticalFlow;

  })();

  module.exports = {
    OpticalFlow: OpticalFlow
  };

}).call(this);
